#pragma kernel CSMain

RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float4 _DirectionalLight;

float2 _PixelOffset = float2(0.5f, 0.5f);

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

static const float PI = 3.14159265f;

struct Sphere
{
	float3 position;
	float radius;
	float3 albedo;
	float3 specular;
};

StructuredBuffer<Sphere> _Spheres;

struct Ray
{
	float3 energy;
	float3 origin;
	float3 direction;
	float length;
};

Ray CreateRay(float3 origin, float3 direction)
{
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;
	ray.energy = float3(2.0f, 2.0f, 2.0f);
	ray.length = origin.x*direction.x + origin.y*direction.y + origin.z*direction.z;
	return ray;
}

Ray CreateCameraRay(float2 uv)
{
	// Transform the camera origin to world space
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

	// Invert the perspective projection of the view-space position
	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
	// Transform the direction from camera to world space and normalize
	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);
	return CreateRay(origin, direction);
}



struct RayHit
{
	float3 albedo;
	float3 specular;
	float3 position;
	float distance;
	float3 normal;
};
RayHit CreateRayHit()
{
	RayHit hit;
	hit.position = float3(0.0f, 0.0f, 0.0f);
	hit.distance = 1.#INF;
	hit.normal = float3(0.0f, 0.0f, 0.0f);
	hit.albedo = float3(0.0f, 0.0f, 0.0f);
	hit.specular = float3(0.0f, 0.0f, 0.0f);
	return hit;
}



static const int colorBlack = 0;
static const int colorWhite = 1;
static const int colorPurple = 2;
static const int normal = 0;
static const int reverseNormal = 1;


//void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
//{
//	// Calculate distance along the ray where the ground plane is intersected
//	float t = -ray.origin.y / ray.direction.y;
//	if (t > 0 && t < bestHit.distance)
//	{
//		bestHit.distance = t;
//		bestHit.position = ray.origin + t * ray.direction;
//		bestHit.normal = float3(0.0f, 1.0f, 0.0f);
//		bestHit.albedo = 0.8f;
//		bestHit.specular = 0.3f;
//	}
//}


//void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
//{
//
//	float3 d = ray.origin - sphere.position;
//	float p1 = -dot(ray.direction, d);
//	float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
//	if (p2sqr < 0)
//		return;
//	float p2 = sqrt(p2sqr);
//	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
//	if (t > 0 && t < bestHit.distance)
//	{
//		bestHit.distance = t;
//		bestHit.position = ray.origin + t * ray.direction;
//		bestHit.normal = normalize(bestHit.position - sphere.position);
//		bestHit.albedo = sphere.albedo;
//		bestHit.specular = sphere.specular;
//	}
//}


static const float EPSILON = 1e-8;
void IntersectTriangle(Ray ray, inout RayHit bestHit, float3 vert0, float3 vert1, float3 vert2, int normalMod, int colorMod)
{
	float t, u, v;
	// find vectors for two edges sharing vert0
	
	float3 edge1, edge2,tvec;	

	if (normalMod == normal) {
		edge1 = vert1 - vert0;
	 edge2 = vert2 - vert0;
	 tvec = ray.origin - vert0;
	}
	else {
		edge1 = vert0 - vert1;
		edge2 = vert0 - vert2;
		tvec = ray.origin - vert0;

	}
	// begin calculating determinant - also used to calculate U parameter
	float3 pvec = cross(ray.direction, edge2);
	// if determinant is near zero, ray lies in plane of triangle
	float det = dot(edge1, pvec);
	// use backface culling
	if (det < EPSILON)
		return ;
	float inv_det = 1.0f / det;
	// calculate distance from vert0 to ray origin
	// calculate U parameter and test bounds
	u = dot(tvec, pvec) * inv_det;
	if (u < 0.0 || u > 1.0f)

		return ;
	// prepare to test V parameter
	float3 qvec = cross(tvec, edge1);
	// calculate V parameter and test bounds
	v = dot(ray.direction, qvec) * inv_det;
	if (v < 0.0 || u + v > 1.0f)
		return ;
	// calculate t, ray intersects triangle
	t = dot(edge2, qvec) * inv_det;

	if (t > 0 && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;


		if(normalMod == normal)
		bestHit.normal = normalize(cross(vert1 - vert0, vert2 - vert0));
		else
		bestHit.normal = normalize(cross(vert0 - vert1, vert0 - vert2));

		if(colorMod == colorBlack){		
			bestHit.albedo = float3(0, 0, 0);
			bestHit.specular = float3(0, 0, 0);
		}
		else if (colorMod == colorWhite) {
			bestHit.albedo = float3(1, 1, 1)  ;
			//bestHit.albedo = float3(0.8f, 0.5f, 0.8f);

			bestHit.specular = float3(1, 1, 1) *0.5f ;
		}
		else {
			bestHit.albedo = float3(0.8f, 0.2f, 0.8f);
			//bestHit.specular = float3(1, 1, 1)  *1.5;
			bestHit.specular = float3(0, 0, 0);

		}


	}


}

void ScalePolygon(float3 old_points[5], float offset, out float3 enlarged_points[5])
{
	float3 P = float3(0, 0, 0);
		for (int j = 0; j < 5; j++)
		{
			P += old_points[j];

		}

	P = P / 5;

	for (int j = 0; j < 5; j++)
	{
		enlarged_points[j]= old_points[j]* offset + (1-offset)*P ;

	}

}





void IntersectPentagon(Ray ray, inout RayHit bestHit, float3 vert0, float3 vert1, float3 vert2, float3 vert3, float3 vert4, int normalMod, int colorMod)
{


	
	IntersectTriangle(ray, bestHit, vert0, vert1, vert2, normalMod, colorMod);
	IntersectTriangle(ray, bestHit, vert0, vert2, vert3, normalMod, colorMod);
	IntersectTriangle(ray, bestHit, vert0, vert3, vert4, normalMod, colorMod);


	int mult = 50;


float3 vert[5] = {
		vert0,
		vert1,
		vert2,
		vert3,
		vert4
	};
	float offset = 0.95;
	float3 newVert[5];

	ScalePolygon(vert, offset,newVert);





	colorMod = colorBlack;

	int indexes[6] = {
		0,4,3,2,1,0
	//	0,1,2,3,4,0
	};




	int reverseNormalMod;
	if (normalMod == normal)
		reverseNormalMod = reverseNormal;
	else
		reverseNormalMod = normal;

	for(int i = 4; i>-1; i--) {

	IntersectTriangle(ray, bestHit, newVert[indexes[i]], vert[indexes[i]], vert[indexes[i+1]], reverseNormalMod, colorMod);
	IntersectTriangle(ray, bestHit,newVert[indexes[i+1]] , newVert[indexes[i]],vert[indexes[i+1]]  , reverseNormalMod, colorMod);
	}

	
	for (int i = 4; i > -1; i--) {

	IntersectTriangle(ray, bestHit,  vert[indexes[i+1]],vert[indexes[i]], newVert[indexes[i]], reverseNormalMod, colorMod);
	IntersectTriangle(ray, bestHit,vert[indexes[i+1]]  , newVert[indexes[i]],newVert[indexes[i+1]] , reverseNormalMod, colorMod);
	}	



}



static const int multi = 20;

static const float PHI = 1.618;
static float3 vertices[20] = {

	float3(1,-1 ,-1) * multi, //0 

	float3(1 ,-1 ,1) * multi, //1
	float3(1 ,1 ,-1) * multi, //2
	float3(1 ,1 ,1) * multi,  //3
	float3(-1 ,-1 ,-1) * multi, //4
	float3(-1 ,-1 ,1) * multi, //5
	float3(-1 ,1 ,-1) * multi, //6
	float3(-1 ,1 ,1) * multi, //7

	float3(0, PHI ,-(1 / PHI)) * multi,  //8
	float3(0, -PHI ,-(1 / PHI)) * multi,  //9
	float3(0, -PHI ,(1 / PHI)) * multi,  //10
	float3(0, PHI ,(1 / PHI)) * multi,  //11

	float3(-(1 / PHI) , 0, PHI) * multi,  //12
	float3(-(1 / PHI) , 0, -PHI) * multi,  //13
	float3((1 / PHI) , 0, -PHI) * multi,  //14
	float3((1 / PHI) , 0, PHI) * multi,  //15

	float3(PHI ,  1 / PHI , 0) * multi,  //16
	float3(PHI , -1 / PHI , 0) * multi,  //17
	float3(-PHI , -1 / PHI , 0) * multi,  //18
	float3(-PHI , 1 / PHI , 0) * multi //19
};
//
void IntersectDodecahedron(Ray ray, inout RayHit bestHit, int normalMod,int colorMod)
{

	int reverseNormalMod;
	if (normalMod == normal)
		reverseNormalMod = reverseNormal;
	else
		reverseNormalMod = normal;
	//current mod 1

	IntersectPentagon(ray, bestHit, vertices[4], vertices[9], vertices[0], vertices[14], vertices[13], normalMod, colorMod); //OK
	IntersectPentagon(ray, bestHit, vertices[5], vertices[10], vertices[9], vertices[4], vertices[18], reverseNormalMod, colorMod);//OK
	IntersectPentagon(ray, bestHit, vertices[3], vertices[11], vertices[8], vertices[2], vertices[16], normalMod, colorMod); //OK  //reverseleyince çerçeve bozuluyor
	IntersectPentagon(ray, bestHit, vertices[11], vertices[7], vertices[19], vertices[6], vertices[8], normalMod, colorMod); //OK //reverseleyince çerçeve bozuluyor

	IntersectPentagon(ray, bestHit, vertices[6], vertices[13], vertices[14], vertices[2], vertices[8], normalMod, colorMod); //OK


	IntersectPentagon(ray, bestHit, vertices[2], vertices[14], vertices[0], vertices[17], vertices[16], normalMod, colorMod);//OK





	
	IntersectPentagon(ray, bestHit, vertices[3], vertices[16], vertices[17], vertices[1], vertices[15], reverseNormalMod, colorMod); //Siyah
	IntersectPentagon(ray, bestHit, vertices[7], vertices[11], vertices[3], vertices[15], vertices[12], reverseNormalMod, colorMod);//siyah
	//
	
	
	
	
	IntersectPentagon(ray, bestHit, vertices[7], vertices[12], vertices[5], vertices[18], vertices[19], reverseNormalMod, colorMod); //Siyah
	IntersectPentagon(ray, bestHit, vertices[19], vertices[18], vertices[4], vertices[13], vertices[6], reverseNormalMod, colorMod); //siyah
	IntersectPentagon(ray, bestHit, vertices[12], vertices[15], vertices[1], vertices[10], vertices[5], reverseNormalMod, colorMod); //siyah//ok
	IntersectPentagon(ray, bestHit, vertices[1], vertices[17], vertices[0], vertices[9], vertices[10], reverseNormalMod, colorMod);//siyah //ok
	
	//
	
	
	
	
	/*Sphere sphere;

	for (int a = 0; a < 20; a++) {


		sphere.position = vertices[a];
		sphere.radius = 50;
		sphere.albedo = float3(1,1, 1);
		sphere.specular = float3(1, 1, 1);


		IntersectSphere(ray, bestHit, sphere);

	}*/
}


void DrawSimplePentagon(Ray ray,inout RayHit bestHit, int normalMod,int colorMod) {

	float3 k0, k1, k2, k3, k4, k5;
	k0 = float3(20, -7, 3);
	k1 = float3(20, 0, 9);
	k2 = float3(20, 7, 3);
	k3 = float3(20, 3, -5);
	k4 = float3(20, -3, -5);

	IntersectPentagon(ray, bestHit, k0, k1, k2,k3,k4, normalMod, colorMod);
}

void DrawTrianglePyramid(Ray ray, inout RayHit bestHit) {
	float3 k0, k1, k2, k3;
	float pointMulti = 150;

	k0 = float3(0, 0, 0);
	k0 = float3(-pointMulti, -pointMulti, 0);
	k1 = float3(pointMulti, 0, 0);
	k2 = float3(0, pointMulti, 0);
	k3 = float3(0, 0, pointMulti);
	int normalMod = normal;
	int colorMod = colorWhite;
	IntersectTriangle(ray, bestHit, k0, k1, k2,normalMod, colorMod);
	IntersectTriangle(ray, bestHit, k0, k3, k1, normalMod, colorMod);
	IntersectTriangle(ray, bestHit, k0, k2, k3, normalMod, colorMod);
	IntersectTriangle(ray, bestHit, k1, k3, k2, normalMod, colorMod);
	

}

RayHit Trace(Ray ray)
{
	RayHit bestHit = CreateRayHit();
	//IntersectGroundPlane(ray, bestHit);

	// Trace spheres
	/*uint numSpheres, stride;
	_Spheres.GetDimensions(numSpheres, stride);
	for (uint i = 0; i < numSpheres; i++)
		IntersectSphere(ray, bestHit, _Spheres[i]);*/


	//Triangles		
	//DrawTrianglePyramid(ray, bestHit);


	//PENTAGON
	DrawSimplePentagon(ray,bestHit, normal,colorWhite);

	

	//DODECAHEDRON
	//IntersectDodecahedron(ray, bestHit,normal, colorWhite);
//IntersectDodecahedron(ray, bestHit,reverseNormal,colorWhite);




	return bestHit;
}


float3 Shade(inout Ray ray, RayHit hit)
{
	if (hit.distance < 1.#INF)
	{

		// Reflect the ray and multiply energy with specular reflection
		ray.origin = hit.position + hit.normal * 0.001f;
		ray.direction = reflect(ray.direction, hit.normal);
		ray.energy *= hit.specular;
		// Return nothing
		// Return a diffuse-shaded color

		// Shadow test ray
		bool shadow = false;
		Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
		RayHit shadowHit = Trace(shadowRay);
		if (shadowHit.distance != 1.#INF)
		{
			return float3(0.0f, 0.0f, 0.0f);
		}
		return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * hit.albedo;
	}
	else
	{
		// Erase the ray's energy - the sky doesn't reflect anything
		ray.energy = 0.0f;
		// Sample the skybox and write it
		float theta = acos(ray.direction.y) / -PI;
		float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
		//return float3(0.0f, 0.0f, 0.0f);

		return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz *1.8f;
	}
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	// Get the dimensions of the RenderTexture
	uint width, height;
	Result.GetDimensions(width, height);
	// Transform pixel to [-1,1] range
	float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);
	// Get a ray for the UVs
	Ray ray = CreateCameraRay(uv);

	// Trace and shade
	float3 result = float3(0, 0, 0);

	int bounces =2;



	float multi = 0.1f;
	int bounceSet = 0;
	for (int i = 0; i < bounces; i++)
	{
		RayHit hit = Trace(ray);

		result += ray.energy * Shade(ray, hit);
		if (!any(ray.energy))
			break;
	}
	Result[id.xy] = float4(result, 1);
}