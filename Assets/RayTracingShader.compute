#pragma kernel CSMain

RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float4 _PointLight;

float2 _PixelOffset;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

static const float PI = 3.14159265f;
static const int FF = 0;  //Face forward
static const int FB = 1;  //Face backward

static const int CW = 0;  //Color white
static const int CB = 1;  //Color black

//-------------------------------------
//- RAY

struct Ray
{
	float3 origin;
	float3 direction;
	float3 energy;
};

Ray CreateRay(float3 origin, float3 direction)
{
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;
	ray.energy = float3(1.0f, 1.0f, 1.0f);
	return ray;
}

Ray CreateCameraRay(float2 uv)
{
	// Transform the camera origin to world space
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

	// Invert the perspective projection of the view-space position
	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
	// Transform the direction from camera to world space and normalize
	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);

	return CreateRay(origin, direction);
}


//-------------------------------------
//- RAYHIT

struct RayHit
{
	float3 position;
	float distance;
	float3 normal;
	float3 albedo;
	float3 specular;
};

RayHit CreateRayHit()
{
	RayHit hit;
	hit.position = float3(0.0f, 0.0f, 0.0f);
	hit.distance = 1.#INF;
	hit.normal = float3(0.0f, 0.0f, 0.0f);
	hit.albedo = float3(0.0f, 0.0f, 0.0f);
	hit.specular = float3(0.0f, 0.0f, 0.0f);
	return hit;
}


//-------------------------------------
//- INTERSECTION

static const float EPSILON = 1e-8;

void IntersectTriangle(Ray ray, inout RayHit bestHit,float3 vert0, float3 vert1, float3 vert2, int FaceOrientation, int Color)
{

	float u, v, t;
	// find vectors for two edges sharing vert0
	if (FaceOrientation == FB) { //Face orientation is changed 
		float3 temp = vert0;
		vert0 = vert2;
		vert2 = temp;
	}

	float3 edge1 = vert1 - vert0;
	float3 edge2 = vert2 - vert0;

	// begin calculating determinant - also used to calculate U parameter
	float3 pvec = cross(ray.direction, edge2);

	// if determinant is near zero, ray lies in plane of triangle
	float det = dot(edge1, pvec);

	// use backface culling
	if (det < EPSILON)
		return ;
	float inv_det = 1.0f / det;

	// calculate distance from vert0 to ray origin
	float3 tvec = ray.origin - vert0;

	// calculate U parameter and test bounds
	u = dot(tvec, pvec) * inv_det;
	if (u < 0.0 || u > 1.0f)
		return ;

	// prepare to test V parameter
	float3 qvec = cross(tvec, edge1);

	// calculate V parameter and test bounds
	v = dot(ray.direction, qvec) * inv_det;
	if (v < 0.0 || u + v > 1.0f)
		return ;

	// calculate t, ray intersects triangle
	t = dot(edge2, qvec) * inv_det;

	if (t > 0 && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = normalize(cross(vert1 - vert0, vert2 - vert0));
		if (Color == CW) {
		bestHit.albedo = 1;
		bestHit.specular = 0.9f;
		}
		else {

			bestHit.albedo = 0.0;
			bestHit.specular = 0.0f;
		}

		
	}
}

//Scale pentagon by offset, set new vertex points
void ScalePentagon(float3 old_points[5], float offset, out float3 scaled_points[5])
{
	float3 P = float3(0, 0, 0);
	for (int j = 0; j < 5; j++)
	{
		P += old_points[j];
	}
	P = P / 5;
	for (int j = 0; j < 5; j++)
	{
		scaled_points[j] = old_points[j] * offset + (1 - offset)*P;
	}
}

//Scale triangle by offset, set new vertex points
void ScaleTriangle(float3 old_points[3], float offset, out float3 scaled_points[3])
{
	float3 P = float3(0, 0, 0);
	for (int j = 0; j < 3; j++)
	{
		P += old_points[j];
	}
	P = P / 3;
	for (int j = 0; j < 3; j++)
	{
		scaled_points[j] = old_points[j] * offset + (1 - offset)*P;
	}
}


void DrawTriangle(Ray ray, inout RayHit bestHit, float3 vert0,float3 vert1,float3 vert2, int FaceOrientation ) {

	float3 vert[3]={
		vert0,
		vert1,
		vert2
	};
	float3 sclaedVert[3];

	float offset = 0.95;
	
	ScaleTriangle(vert, offset, sclaedVert);

	int indexes[4] = {
	0,1,2,0
	};

	IntersectTriangle(ray, bestHit, sclaedVert[0], sclaedVert[1], sclaedVert[2], FaceOrientation, CW); //Render triangle

	for (int i = 0; i < 3; i++) { //Render inward and outward borders

		IntersectTriangle(ray, bestHit, vert[indexes[i]], vert[indexes[i+1]], sclaedVert[indexes[i ]], FF, CB);
		IntersectTriangle(ray, bestHit, sclaedVert[indexes[i ]], vert[indexes[i+1]], sclaedVert[indexes[i + 1]], FF, CB);	

		IntersectTriangle(ray, bestHit, vert[indexes[i]], vert[indexes[i + 1]], sclaedVert[indexes[i]], FB, CB);
		IntersectTriangle(ray, bestHit, sclaedVert[indexes[i ]], vert[indexes[i+1]], sclaedVert[indexes[i + 1]], FB, CB);
	}
	
}
void DrawPentagon(Ray ray, inout RayHit bestHit, float3 k0,float3 k1,float3 k2,float3 k3,float3 k4 , int FO) {

	float3 vert[5] = {
		k0,
		k1,
		k2,
		k3,
		k4
	};

	float3 sclaedVert[5];

	float offset = 0.95;

	ScalePentagon(vert, offset, sclaedVert);

	int indexes[6] = {
	0,1,2,3,4,0
	};

	//Render each triangle that constructs the pentagon
	for (int i = 1; i < 4; i++) {  //Render inward and outward borders
		IntersectTriangle(ray, bestHit, sclaedVert[0], sclaedVert[i], sclaedVert[i + 1], FO, CW);
	}

	for (int i = 0; i < 5; i++) {  //Render inward and outward borders

		IntersectTriangle(ray, bestHit, sclaedVert[indexes[i]],vert[indexes[i + 1]],  vert[indexes[i]],FB, CB);
		IntersectTriangle(ray, bestHit, sclaedVert[indexes[i + 1]], vert[indexes[i + 1]], sclaedVert[indexes[i]], FB, CB);

		IntersectTriangle(ray, bestHit, vert[indexes[i]], vert[indexes[i + 1]], sclaedVert[indexes[i]], FB, CB);
		IntersectTriangle(ray, bestHit, sclaedVert[indexes[i]], vert[indexes[i + 1]], sclaedVert[indexes[i + 1]], FB, CB);
	}

}

//Draw a triangle pyramid
void DrawTrianglePyramid(Ray ray, inout RayHit bestHit) {
	float3 k0, k1, k2, k3;
	float pointMulti = 150;

	k0 = float3(-pointMulti, -pointMulti, 0);
	k1 = float3(pointMulti, 0, 0);
	k2 = float3(0, pointMulti, 0);
	k3 = float3(0, 0, pointMulti);


	DrawTriangle(ray, bestHit, k0, k1, k2, FF); 
	DrawTriangle(ray, bestHit, k0, k3, k1, FF); 
	DrawTriangle(ray, bestHit, k0, k2, k3, FF); 
	DrawTriangle(ray, bestHit, k1, k3, k2, FF);
}


static const int multi = 20;

static const float PHI = 1.618;
static float3 vertices[20] = {  //vertex points of dodecahedron
	float3(1,-1 ,-1) * multi, //0 
	float3(1 ,-1 ,1) * multi, //1
	float3(1 ,1 ,-1) * multi, //2
	float3(1 ,1 ,1) * multi,  //3
	float3(-1 ,-1 ,-1) * multi, //4
	float3(-1 ,-1 ,1) * multi, //5
	float3(-1 ,1 ,-1) * multi, //6
	float3(-1 ,1 ,1) * multi, //7
	float3(0, PHI ,-(1 / PHI)) * multi,  //8
	float3(0, -PHI ,-(1 / PHI)) * multi,  //9
	float3(0, -PHI ,(1 / PHI)) * multi,  //10
	float3(0, PHI ,(1 / PHI)) * multi,  //11
	float3(-(1 / PHI) , 0, PHI) * multi,  //12
	float3(-(1 / PHI) , 0, -PHI) * multi,  //13
	float3((1 / PHI) , 0, -PHI) * multi,  //14
	float3((1 / PHI) , 0, PHI) * multi,  //15
	float3(PHI ,  1 / PHI , 0) * multi,  //16
	float3(PHI , -1 / PHI , 0) * multi,  //17
	float3(-PHI , -1 / PHI , 0) * multi,  //18
	float3(-PHI , 1 / PHI , 0) * multi //19
};

void DrawDodecahedron(Ray ray, inout RayHit bestHit)
{
	//Twelve faces of dodecahedron 
	DrawPentagon(ray, bestHit, vertices[4], vertices[9], vertices[0], vertices[14], vertices[13], FF); 
	DrawPentagon(ray, bestHit, vertices[5], vertices[10], vertices[9], vertices[4], vertices[18], FF);
	DrawPentagon(ray, bestHit, vertices[3], vertices[11], vertices[8], vertices[2], vertices[16], FF); 
	DrawPentagon(ray, bestHit, vertices[11], vertices[7], vertices[19], vertices[6], vertices[8], FF); 
	DrawPentagon(ray, bestHit, vertices[6], vertices[13], vertices[14], vertices[2], vertices[8], FF); 
	DrawPentagon(ray, bestHit, vertices[2], vertices[14], vertices[0], vertices[17], vertices[16], FF);
	DrawPentagon(ray, bestHit, vertices[3], vertices[16], vertices[17], vertices[1], vertices[15], FF); 
	DrawPentagon(ray, bestHit, vertices[7], vertices[11], vertices[3], vertices[15], vertices[12], FF);
	DrawPentagon(ray, bestHit, vertices[7], vertices[12], vertices[5], vertices[18], vertices[19], FF);
	DrawPentagon(ray, bestHit, vertices[19], vertices[18], vertices[4], vertices[13], vertices[6], FF); 
	DrawPentagon(ray, bestHit, vertices[12], vertices[15], vertices[1], vertices[10], vertices[5], FF); 
	DrawPentagon(ray, bestHit, vertices[1], vertices[17], vertices[0], vertices[9], vertices[10], FF);
}



//-------------------------------------
//- TRACE

RayHit Trace(Ray ray)  //tests the best hit on drawn objects
{
	RayHit bestHit = CreateRayHit();
	DrawDodecahedron(ray, bestHit);
	return bestHit;
}


//-------------------------------------
//- SHADE

float3 Shade(inout Ray ray, RayHit hit)
{
	if (hit.distance < 1.#INF)
	{
		// Reflect the ray and multiply energy with specular reflection
		ray.origin = hit.position + hit.normal * 0.001f;
		ray.direction = reflect(ray.direction, hit.normal);
		ray.energy *= hit.specular;

		// Return a diffuse-shaded color
		return saturate(dot(hit.normal, _PointLight.xyz) * -1) * _PointLight.w * hit.albedo;
	}
	else
	{
		
		// Erase the ray's energy - the sky doesn't reflect anything
		ray.energy = 0.0f;
		// Sample the skybox and write it
		float theta = acos(ray.direction.y); 
		float phi = atan2(ray.direction.x, -ray.direction.z);
		return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz* 1.8f;
	}
}


//-------------------------------------
//- KERNEL

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	// Get the dimensions of the RenderTexture
	uint width, height;
	Result.GetDimensions(width, height);

	// Transform pixel to [-1,1] range
	float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

	// Get a ray for the UVs
	Ray ray = CreateCameraRay(uv);

	// Trace and shade the ray
	float3 result = float3(0, 0, 0);

	for (int i = 0; i < 8; i++) //bounces
	{
		RayHit hit = Trace(ray);
		result += ray.energy * Shade(ray, hit);

		if (!any(ray.energy)) //no enegry left cannot bounce anymore
			break;
	}
	Result[id.xy] = float4(result.x,result.y,result.z, 1);
}
